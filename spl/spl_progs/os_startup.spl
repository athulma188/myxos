// load FAT to memory
load(5,19);
///////////////////////////////

//load Disk free list to memory
load (6,20);
///////////////////////////////

// loading exec handler to memory
load(7,1);	
load(8,2);
///////////////////////////////

///load timer interrupt code to memory
load (9,3);
load (10,4);
/////////////////////////////////////


//loading interrupt 1 code to memory
load (11,5);
load (12,6);
/////////////////////////////

//loading interrupt 2 code to memory
load (13,7);
load (14,8);
/////////////////////////////

//loading interrupt 3 code to memory
load (15,9);
load (16,10);
/////////////////////////////

//loading interrupt 4 code to memory
load (17,11);
load (18,12);
/////////////////////////////

//loading interrupt 5 code to memory
load (19,13);
load (20,14);
/////////////////////////////

//loading interrupt 6 code to memory
load (21,15);
load (22,16);
/////////////////////////////

//loading interrupt 7 to memory
load(23,17);
load(24,18);
///////////////////////////////

//loading INIT code to memory
//load(25,21);
//load(26,22);
//load(27,23);
/////////////////////////////



[READY_LIST + 0] = 0;	//setting up the PCB for INIT
[READY_LIST + 31] = 0;  //Setting PID of parent of INIT as 0
PTBR =  1024;	//setting page table base 
PTLR = 4; //setting page table length

//page table entry 0
[PTBR + 0] = 21;
[PTBR + 1] = "00";

//page table entry 1
[PTBR + 2] = 22;
[PTBR + 3] = "00";

//page table entry 2
[PTBR + 4] = 23;
[PTBR + 5] = "00";

//page table entry 3
[PTBR + 6] = 25;
[PTBR + 7] = "01";

alias i S0;

//////// Setting up the Page tables ////////////////////

i = 8;
while(i < 32 * 4)do
     [PAGE_TABLE + i] = -1;
     [PAGE_TABLE + i + 1] = "00";     
     i = i + 2;
endwhile;

/////////////////////////////////////////////////////

//////// Setting up the Memory Free List //////////////
i = 0;
while (i < 64) do
      if(i <= 25)then
      	   [MEM_LIST + i] = 1;
      else
	   [MEM_LIST + i] = 0;
      endif;
      i = i + 1;
endwhile;


//////////////////////////////////////////////////////

///////////Clearing the swap area ////////////////////

i = 448;
while( i < 512) do
     [DISK_LIST + i] = 0;
     i = i + 1;
endwhile;

store (6, 20);	// Store disk free list back to disk

/////////////////////////////////////////////////////

////////// Initialising all PCBs/////////////////////
i = 0;
while ( i < 32) do
      [READY_LIST + i * 32 + 1] = 0;
      i = i + 1;
endwhile;
///////////////////////////////////////////////////////

/////////////Setting up Per process open file table of INIT///////
i = 15;
while (i <= 30) do
      [READY_LIST + i] = -1;
      i = i + 1;
endwhile;
//////////////////////////////////////////////////////////////////



[READY_LIST + 1] = 2;	//set the task state to 'running'

SP = 3 * 512; //setting up the stack pointer for the process

[28 * 512] = 0; 	//setting IP in INIT stack




i = 0;  
while ( i <  128) do	// 64 entries, each of size 2 words		
      [ FILE_TABLE + i + 0] = -1;	// Set FAT Index to -1
      [ FILE_TABLE + i + 1] =  0;	// Set File Open Count to 0
      i = i + 2; 	   // Move to next entry
      endwhile;	


ireturn;


