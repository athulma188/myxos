// loading exec handler to memory
load(7,1);	
load(8,2);
///////////////////////////////

///load timer interrupt code to memory
load (9,3);
load (10,4);
/////////////////////////////////////


//loading interrupt 1 code to memory
load (11,5);
load (12,6);

/////////////////////////////

//loading interrupt 7 to memory
load(23,17);
load(24,18);
///////////////////////////////


[READY_LIST + 0] = 0;	//setting up the PCB

//loading INIT code to memory
load(25,21);
load(26,22);
load(27,23);
/////////////////////////////


PTBR =  1024;	//setting page table base 
PTLR = 4; //setting page table length

//page table entry 0
[PTBR + 0] = 25;
[PTBR + 1] = "01";

//page table entry 1
[PTBR + 2] = 26;
[PTBR + 3] = "01";

//page table entry 2
[PTBR + 4] = 27;
[PTBR + 5] = "01";

//page table entry 3
[PTBR + 6] = 28;
[PTBR + 7] = "01";


[READY_LIST + 1] = 2;	//set the task state to 'running'

SP = 3 * 512; //setting up the stack pointer for the process

[28 * 512] = 0; 	//setting IP in INIT stack

///Setting up  PCB of process 2
alias PCB_P1 S0;
PCB_P1 = READY_LIST + 32;

[ PCB_P1 + 0] = 1;

load(29,25);


alias PTBR_P1 S1;
PTBR_P1 = PAGE_TABLE + 1 * 8;

[ PTBR_P1 + 0 ] = 29;
[ PTBR_P1 + 1 ] = "01";
[ PTBR_P1 + 2 ] = -1;
[ PTBR_P1 + 3 ] = "00";
[ PTBR_P1 + 4 ] = -1;
[ PTBR_P1 + 5 ] = "00";
[ PTBR_P1 + 6 ] = 30;
[ PTBR_P1 + 7 ] = "01";

[PCB_P1 + 1] = 1;
[PCB_P1 + 2] = 3 * 512;
[PCB_P1 + 3] = 3 * 512;
[PCB_P1 + 4] = 0;
[PCB_P1 + 5] = PTBR_P1;
[PCB_P1 + 6] = 4;


ireturn;


