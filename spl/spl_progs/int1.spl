alias phySP S0;
phySP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);//calculate physical address of the stack pointer

alias sysCallNo S1;
sysCallNo = [phySP - 1];	//find syscall number
if( sysCallNo == 1)then
    alias filename S5;
    filename = [phySP-3];	//store argument to register


/// Check if a file with same name already exists in the FAT;//////
///////////////////////// If yes return 0 ////////////////////////

    alias i S2;
    i = FAT;	
    while (i < FAT + 512) do
    	  if ([i] == filename)then
	     [phySP - 2] = 0;
	     ireturn;
	  endif;
	  i = i + 8;
    endwhile;
//////////////////////////////////////////////////////////////


////////////////  Find a free disk block  ///////////////////////
//////////////  If there is none, return -1  ////////////////////
    i = 24;
    while( i < 448)do
    	   if ([DISK_LIST + i] == 0)then
	      break;
	   endif;
	   i = i + 1;
    endwhile;

    if(i == 448)then
    	 [phySP -2] = -1;
	 ireturn;
    endif;
/////////////////////////////////////////////////////////////

////////////  Search the FAT to find an empty entry/////////////
//////////////////If not found return -1   ////////////////////
    alias j S3;
    j = FAT;
    while (j < FAT + 512)do
    	  if([j + 2] == -1)then
	  	break;
	  endif;
	  j = j + 8;
    endwhile;

    if(j == FAT + 512)then
    	 [phySP - 2] = -1;
	 ireturn;
    endif;
////////////////////////////////////////////////////////////////


    [j] = filename;	// set filename to the FAT entry
    [j + 1] = 0;	//set filesize to FAT entry
    [j + 2] = i;	//set the basic block number
    
    load(1,i);		//load the basic block to OS scratchpad

/////////////////Clear contents of basic block to all -1's /////////////
    alias k S4;
    k = 0;
    while(k < 512)do
    	    [k + 512] = -1;
	    k = k + 1;
    endwhile;

/////////////////////////////////////////////////////////////////////

    store (1, i);	//Store the basic block back to memory
    
    [DISK_LIST + i] = 1;  // Set the entry in Disk free list for the basic block to 1 (Used)

    store(5,19);       // Store FAT to disk
    store(6,20);       // Store Disk Free List to disk
    [phySP - 2] = 0;   // return 0
    ireturn;    
endif;
if (sysCallNo == 4) then
   alias filename S5;
   filename = [phySP-3];	//store argument to register

   /// Check if a file with same name already exists in the FAT;//////
   ///////////////////////// If yes return 0 ////////////////////////

   alias i S2;
   i = 0;	
   while (i < 64) do
   	  if ([FAT + i * 8] == filename)then
	     break;
	  endif;
	  i = i + 1;
   endwhile;
   //////////////////////////////////////////////////////////////

   // if file doesnt exist return -1
   if (i == 64)then
      [phySP - 2] = -1;
      ireturn;
   endif;

   alias FATindex S3;
   FATindex = i;  //store FAT index 

   // search the system wide open file table for the file
   i = 0;
   while (i < 64) do 
   	 if ([FILE_TABLE + 2 * i] == FATindex) then	// if found return -1
	    [phySP - 2] = -1;
	    ireturn;
	 endif;
	 i = i + 1;
   endwhile;
   /////////////////////////////////////////////////////////
   
   i = 0;
   load (1, [FAT + FATindex * 8 + 2]);	//load basic block to scratchpad

   ///// Clear contents of all data blocks//////////
   while ( [512 + i] != -1 && i < 512) do 
   	 alias data S4;
	 data = [512 + i];

	 load( 1, data); 
	 alias counter S6;
	 counter = 0;
	 while (counter < 512) do
	       [counter] = "";
	       counter = counter + 1;
	 endwhile;
	 store(1, data);	//store back the data block after clearing
	 
	 [DISK_LIST + data] = 0;	// set data block to unused in the Disk Free list
	 store(6, 20);
	 
	 load(1, [FAT + FATindex * 8 + 2]);	//clear the basic block
	 [512 + i] = "";
	 store(1,[FAT + FATindex * 8 + 2]);	//store the block to disk

	 i = i + 1;
   endwhile;

   [DISK_LIST + [FAT + FATindex * 8 + 2]] = 0;	//set the basic block to unused in Disk Free List
   store(6, 20);     //Store DF list to disk

   //invalidate fat entry
   [FAT + FATindex * 8] = -1;	    
   [FAT + FATindex * 8 + 2] = -1;
   store(5, 19); //Store back the FAT to disk
   ////////

   [phySP - 2] = 0;	//return 0
   ireturn;
   
endif;