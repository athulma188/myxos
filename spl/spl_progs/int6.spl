alias phySP S0;
phySP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);//calculate physical address of the stack pointer

alias sysCallNo S1;
sysCallNo = [phySP - 1];        //find syscall number
if( sysCallNo == 9)then
    alias filename S2;
    filename = [phySP - 3];

    //////////////// Search FAT for the file with given filename///////////////////////
    alias counter S3;
    counter = 0;
    while(counter < 64) do
    	if([FAT + counter * 8] == filename)then
		break;
	endif;
	counter = counter + 1;
    endwhile;
    //////////////////////////////////////////////////////////////////

    ///////////// if not found return -1 ////////////////////////
    if( counter == 64)then
    	[phySP - 2] = -1;
	ireturn;
    endif;
    ////////////////////////////////////////////////////////////
    

    
    load (1, [FAT + counter * 8 + 2]);	// load the basic block of file to the scratchpad

    /////////////////// Find the number of code blocks of the new program /////////////////////////
    alias codeblocks S4;
    counter = 0;
    while([SCRATCHPAD + counter] != - 1 && counter < 3)do
    	counter = counter + 1;
    endwhile;
    codeblocks = counter;
    ///////////////////////////////////////////////////////////////////////////////////////////////

    //// If the program has more than 3 code blocks return -1 ////////////
    if (codeblocks > 3)then
       [phySP - 2] = -1;
       ireturn;
    endif;
    //////////////////////////////////////////////////////////////////////

    //////////////////// Decrement share count for valid pages and swap pages in current process /////////////////////////

    counter = 0;
    alias page S5;
    while(counter < 3)do
        page = [PTBR + counter * 2];
	
    	if ([PTBR + counter * 2 + 1] == "01" || [PTBR + counter * 2 + 1] == "11")then
	   [MEM_LIST + page] = [MEM_LIST + page] - 1;
	else
	   if (page >= 448)then
	      [DISK_LIST + page ] = [DISK_LIST + page] - 1;
	   endif; 
	endif;
	counter = counter + 1;
    endwhile;
    //////////////////////////////////////////////////////////////////////////////////////////////

    /// Fill the page table entries with actual code block number and reference bit to 0
    counter = 0;
    while(counter < 3)do
    	if (counter <codeblocks) then
	        [PTBR + counter * 2] = [SCRATCHPAD + counter];
		[PTBR + counter * 2 + 1] = "00";
	else
		[PTBR + counter * 2] = -1;
		[PTBR + counter * 2 + 1] = "00";
	endif;
	counter = counter + 1;
    endwhile;
    ////////////////////////////////////////////////////////////////////////////////////////////
    
    [PTBR + 3 * 2 + 1] = "01";	// Set stackpage to be not referenced and valid

    alias pid S7;
    pid = (PTBR - 1024)/8;
    ///////////// Close all open files in the process and invalidate their per process open file table entry

    counter = 0;
    while(counter < 8)do
    	if ([READY_LIST + pid * 32 + 15 + counter * 2] != -1)then
	       alias svote S6;
   	       svote = [READY_LIST + pid * 32 + 15 + counter * 2];	//find index of file's entry in the System wide open file table
   	       [ FILE_TABLE + svote * 2 + 1] = [ FILE_TABLE + svote * 2 + 1] - 1;  //decrement file open count in System wide open file table entry

   	       if ([ FILE_TABLE + svote * 2 + 1] == 0) then	// if file open count becomes zero invalidate the entry
      	       	  [ FILE_TABLE + svote * 2] = -1;
   	       endif;
   
	       [ READY_LIST + pid * 32 + 15 + counter * 2] = -1;		// invalidate the per process open file table entry 
	       [ READY_LIST + pid * 32 + 15 + counter * 2 + 1] = -1;
	endif;
	counter = counter + 1;
    endwhile;
    
    /////////////////////////////////////////////////////////////////////////////

    SP = 3 * 512;	/// Set the stack pointer to the 4th page in the page table

    alias newphysp S6;
    newphysp = [PTBR + 3 * 2] * 512;	// Find the physical address of the new stack pointer
    [newphysp] = 0;  // Push 0 to top of stack so that ireturn sets 0 to IP

    ireturn;	

endif;

if( sysCallNo == 11)then
    alias pid S2;
    pid = (PTBR - 1024)/8; //find pid of current process from PTBR
    [phySP - 2] = pid;
    ireturn;
endif;

if( sysCallNo == 12)then
    alias pid S2;
    alias ppid S3;

    pid = (PTBR - 1024) /8;	// find pid of current process
    ppid = [READY_LIST + pid * 32 + 31];    // find pid of parent from word 31 of current process' PCB
    [phySP - 2] = ppid;
    ireturn;
endif;